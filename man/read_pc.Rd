% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_pointcloud.R
\name{read_pc}
\alias{read_pc}
\alias{print.forest_pc}
\alias{rbind.forest_pc}
\title{Read trees and neighborhoods from point cloud data.}
\usage{
read_pc(pc_source, verbose = TRUE, xlim = NULL, ylim = NULL, zlim = NULL, ...)
}
\arguments{
\item{pc_source}{object that inherits from class data.frame,  or LAS object,
or character string with path to point cloud of individual tree or a whole
plot either in .las/.laz or .ply format, or any file format readable with
\code{\link[data.table:fread]{data.table::fread()}}.
If provided with a point cloud object in a data.frame, the structure and
column names are validated and homogenized; else, the function tries to
read the point cloud in the specified path.}

\item{verbose}{logical of length 1. Should information about progress be
printed? Defaults to TRUE.}

\item{xlim}{(optional) numeric vector of defining the range of x coordinates.
Can be a vector of length 2 with the minimum and maximum x value, or a
vector of arbitrary length (in this case \code{\link[base:range]{base::range()}} is used to
constrain the x values to its range). This can be useful to for the
memory-efficient handling of very large point cloud objects. Defaults to
NULL (use full range of x coordinates).}

\item{ylim}{(optional) numeric vector of defining the range of y coordinates.
Can be a vector of length 2 with the minimum and maximum y value, or a
vector of arbitrary length (in this case \code{\link[base:range]{base::range()}} is used to
constrain the y values to its range). This can be useful to for the
memory-efficient handling of very large point cloud objects. Defaults to
NULL (use full range of y coordinates).}

\item{zlim}{(optional) numeric vector of defining the range of z coordinates.
Can be a vector of length 2 with the minimum and maximum z value, or a
vector of arbitrary length (in this case \code{\link[base:range]{base::range()}} is used to
constrain the z values to its range). This can be useful to for the
memory-efficient handling of very large point cloud objects. Defaults to
NULL (use full range of z coordinates).}

\item{...}{additional arguments passed on to \code{\link[data.table:fread]{data.table::fread()}}}
}
\value{
object of class \code{forest_pc} (inherits from \code{data.table}) with x, y
and z coordinates of the tree or forest point cloud.
}
\description{
Read and validate a point cloud sourced from a file stored on
disk, or from an object that inherits from class data.frame, or a LAS
object from the lidR package (\link[lidR:LAS-class]{lidR::LAS}).
Supported file formats are .las, .laz, .ply as well as all formats
accepted by \code{\link[data.table:fread]{data.table::fread()}} (.csv, .txt, and others).
}
\details{
Function for reading and validating point cloud data. Currently,
the supported file formats are .las, .laz, .ply, as well as all formats
accepted by \code{\link[data.table:fread]{data.table::fread()}}. For other formats, please load the
point cloud data separately and enter the coordinates as a data.frame.

If provided with tabular data (either as a data.frame or via a path to an
\code{\link[data.table:fread]{data.table::fread()}} readable source), the function by default takes the
columns named "X", "Y", and "Z" or "x", "y", and "z" to be the coordinate
vectors.
If no columns with matching names are available, it takes the first three
numeric columns and returns a message. If the dataset does not contain
three numeric columns or one of the columns labeled x, y, and z is not
numeric, the function fails with an error.

The xlim, ylim and zlim arguments are used internally in \code{\link[=compete_pc]{compete_pc()}} to
filter the neighborhood dataset to a relevant range around the target tree
to speed up calculations.
\subsection{Note: support of .las, .laz and .ply formats}{

The the \code{lidR} package has to be installed to be able to read in .las/.laz
files, which are internally processed by \code{\link[lidR:readLAS]{lidR::readTLSLAS()}}.
Analogously, for point clouds in the .ply format, the \code{Rvcg} package is
required as these are loaded with \code{\link[Rvcg:vcgPlyRead]{Rvcg::vcgPlyRead()}}.
}
}
\examples{
\dontrun{
# Read a tree point cloud in las or laz format
tree <- read_pc(pc_source = "path/to/tree_point_cloud.las")

# Read a tree point cloud in ply format
tree <- read_pc(pc_source = "path/to/tree_point_cloud.ply")

# Read a tree point cloud in txt format
tree <- read_pc(pc_source = "path/to/tree_point_cloud.txt")

# Read a tree point cloud in csv format with non-standard separators
tree <- read_pc(pc_source = "path/to/tree_point_cloud.txt",
  dec = ",", sep = ";")

# Read a forest point cloud in a specified range around a target tree of
# known position (+- 5 m around the origin)
neighborhood <- read_pc(pc_source = "path/to/forest_point_cloud.las",
  xlim = c(-5, 5), ylim = c(-5, 5))

# Convert a point cloud already loaded as a data.frame into forest_pc format
tree <- read_pc(tree_df)

}
}
\seealso{
\code{\link[=compete_pc]{compete_pc()}} for computing tree competition and \code{\link[=tree_pos]{tree_pos()}} for
computing tree position from point cloud objects.
}
