% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compete_pointcloud.R
\name{compete_pc}
\alias{compete_pc}
\alias{print.compete_pc}
\title{Quantify Tree Competition from Point Clouds (Cone or cylinder method)}
\usage{
compete_pc(
  forest_source,
  tree_source,
  comp_method = c("cone", "cylinder"),
  cyl_r = 5,
  h_cone = 0.6,
  z_min = 100,
  h_xy = 0.3,
  ...
)
}
\arguments{
\item{forest_source}{data.frame with neighborhood point cloud or path to file
of neighborhood point cloud in tabular or las/laz format which is passed on
to \code{\link[=read_tree]{read_tree()}}. The neighborhood has to include the target tree and its
neighbors, not height normalized, and can include ground points).
Coordinates have to be in metric system in m!}

\item{tree_source}{data.frame with target tree point cloud or path to file of
target tree point cloud in tabular or las/laz format which is passed on to
\code{\link[=read_tree]{read_tree()}}. Coordinates have to be in metric system in m and same number
of decimal places as the neighborhood point cloud}

\item{comp_method}{character string with competition method. Allowed values
are "cone" for the cone method, "cylinder" for the cylinder method or
"both" for both methods. See details for computation}

\item{cyl_r}{(optional) only needed when using comp_method "cylinder";
numeric value of cylinder radius in m. Default is 5 m.}

\item{h_cone}{(optional) only when using comp_method "cone"; numeric value
describing the fraction of the height of the tree where the tip of the
search cone is located. For example, values of 0.5 or 0.6 specify that the
cone opens in 50 or 60 \% of target tree's height, respectively. Default is
0.6 as proposed by Seidel et al. (2015).}

\item{z_min}{integer of length 1 describing the minimum number of points
needed in the lowermost 0.1 m Z layer to consider it part of the target
tree. Default is 100. Used to calculate the stem base position of the
target tree. For details see \code{\link[=tree_pos]{tree_pos()}}.}

\item{h_xy}{numeric of length 1 describing the height range in m over the
stem base over which the x and y positions are used to calculate the x and
y coordinates of the stem base of the target tree. Default is 0.3 m. Used
to calculate the stem base position of the target tree. For details see
\code{\link[=tree_pos]{tree_pos()}}.}

\item{...}{additional arguments passed on to \code{\link[data.table:fread]{data.table::fread()}}}
}
\value{
data frame with tree ID and of log of counted voxels of neighborhood
point cloud that reach into the cone/cylinder spanned over/around target
tree.
}
\description{
Counts the voxels of neighboring trees that intersect a
search cone or search cylinder around the target tree according to Seidel
et al. (2015) and Metz et al. (2013).
}
\details{
\code{compete_pc()} computes competition indices based on voxel counts of
neighbor trees that intersect a search cone or search cylinder around
the target tree.
\subsection{Cone Method}{

Based on a search cone with an opening angle of 60 degrees,
by default opening from a basal point situated at 60 \% of the
height of the target tree. The competition index is defined as the number
of voxels (0.1 m res.) of neighboring trees situated within the cone
spanned around the target tree (cf. Metz et al 2013; Seidel et al., 2015).
The standard value of \code{h_cone = 0.6} can be adjusted, for instance if no
neighbor trees at all intersect the cone of the target tree. However, be
careful with adjusting this parameter, as competition indices computed with
different \code{h_cone} cannot easily be compared among each other.
}

\subsection{Cylinder Method}{

Based on a  search cylinder with a pre-defined radius \code{cyl_r} around the
target tree (5 m by default). The competition index is defined as the
number of the voxels (0.1 m res.) of neighboring trees situated within the
cylinder around the target tree (cf. Seidel et al., 2015). The index is
sensitive to the choice of the cylinder radius, so be careful when
comparing competition indices computed with different values of \code{cyl_r}.
}
}
\section{Literature}{

\itemize{
\item Metz, J., Seidel, D., Schall, P., Scheffer, D., Schulze, E.-D. & Ammer,
C. (2013). Crown modeling by terrestrial laser scanning
as an approach to assess the effect of aboveground intra- and interspecific
competition on tree growth. Forest Ecology and Management,310:275-288.
https://doi.org/10.1016/j.foreco.2013.08.014
\item Pretzsch, H., Biber, P. & Dursky, J. (2002). The single tree-based stand
simulator SILVA: construction, application and evaluation. For. Ecol.
Manage. 162, 3-21. https://doi.org/10.1016/S0378-1127(02)00047-6
\item Seidel, D., Hoffmann, N., Ehbrecht, M., Juchheim, J. & Ammer, C. (2015).
How neighborhood affects tree diameter increment - New insights from
terrestrial laser scanning and some methodical considerations. Forest
Ecology and Management, 336: 119-128.
http://dx.doi.org/10.1016/j.foreco.2014.10.020
}
}

\examples{
\dontrun{
# Quantify crown competition for a single tree within a plot using cone
# method
CI_cone <- compete_pc("path/to/forest_pc.txt", "path/to/tree_pc.txt",
                          "cone", h_cone = 0.5)

# Quantify competition for a single tree within a plot using cylinder
# method with radius 4 m
CI_cyl <- compete_pc("path/to/forest_pc.txt", "path/to/tree_pc.txt",
"cylinder", cyl_r = 4)
}
}
